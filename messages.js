// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Entry = exports.Entry = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineEntry()

function defineEntry () {
  Entry.encodingLength = encodingLength
  Entry.encode = encode
  Entry.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.timestamp)) throw new Error("timestamp is required")
    var len = encodings.varint.encodingLength(obj.timestamp)
    length += 1 + len
    if (!defined(obj.frr)) throw new Error("frr is required")
    var len = encodings.double.encodingLength(obj.frr)
    length += 1 + len
    if (!defined(obj.avgPeriod)) throw new Error("avgPeriod is required")
    var len = encodings.double.encodingLength(obj.avgPeriod)
    length += 1 + len
    if (!defined(obj.fundingAmount)) throw new Error("fundingAmount is required")
    var len = encodings.double.encodingLength(obj.fundingAmount)
    length += 1 + len
    if (!defined(obj.fundingAmountUsed)) throw new Error("fundingAmountUsed is required")
    var len = encodings.double.encodingLength(obj.fundingAmountUsed)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.timestamp)) throw new Error("timestamp is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.timestamp, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.frr)) throw new Error("frr is required")
    buf[offset++] = 17
    encodings.double.encode(obj.frr, buf, offset)
    offset += encodings.double.encode.bytes
    if (!defined(obj.avgPeriod)) throw new Error("avgPeriod is required")
    buf[offset++] = 25
    encodings.double.encode(obj.avgPeriod, buf, offset)
    offset += encodings.double.encode.bytes
    if (!defined(obj.fundingAmount)) throw new Error("fundingAmount is required")
    buf[offset++] = 33
    encodings.double.encode(obj.fundingAmount, buf, offset)
    offset += encodings.double.encode.bytes
    if (!defined(obj.fundingAmountUsed)) throw new Error("fundingAmountUsed is required")
    buf[offset++] = 41
    encodings.double.encode(obj.fundingAmountUsed, buf, offset)
    offset += encodings.double.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      timestamp: 0,
      frr: 0,
      avgPeriod: 0,
      fundingAmount: 0,
      fundingAmountUsed: 0
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    var found4 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3 || !found4) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.timestamp = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.frr = encodings.double.decode(buf, offset)
        offset += encodings.double.decode.bytes
        found1 = true
        break
        case 3:
        obj.avgPeriod = encodings.double.decode(buf, offset)
        offset += encodings.double.decode.bytes
        found2 = true
        break
        case 4:
        obj.fundingAmount = encodings.double.decode(buf, offset)
        offset += encodings.double.decode.bytes
        found3 = true
        break
        case 5:
        obj.fundingAmountUsed = encodings.double.decode(buf, offset)
        offset += encodings.double.decode.bytes
        found4 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
